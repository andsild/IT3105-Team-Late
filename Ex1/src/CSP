let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <Plug>(neocomplete_start_auto_complete) =neocomplete#mappings#popup_post()
inoremap <silent> <Plug>(neocomplete_start_omni_complete) 
inoremap <silent> <expr> <Plug>(neocomplete_start_unite_quick_match) unite#sources#neocomplete#start_quick_match()
inoremap <silent> <expr> <Plug>(neocomplete_start_unite_complete) unite#sources#neocomplete#start_complete()
inoremap <expr> <Nul> jedi#complete_string(0)
inoremap <expr> <Down> neocomplete#close_popup() . "\<Down>"
inoremap <expr> <Up> neocomplete#close_popup() . "\<Up>"
inoremap <expr> <Right> neocomplete#close_popup() . "\<Right>"
inoremap <expr> <Left> neocomplete#close_popup() . "\<Left>"
inoremap <expr> <S-Tab> pumvisible() ? "\" : "\"
inoremap <expr> <BS> neocomplete#smart_close_popup()."\"
inoremap <silent> <expr> <Plug>(neosnippet_start_unite_snippet) unite#sources#neosnippet#start_complete()
inoremap <silent> <expr> <Plug>(neosnippet_jump) neosnippet#mappings#jump_impl()
inoremap <silent> <expr> <Plug>(neosnippet_expand) neosnippet#mappings#expand_impl()
inoremap <silent> <expr> <Plug>(neosnippet_jump_or_expand) neosnippet#mappings#jump_or_expand_impl()
inoremap <silent> <expr> <Plug>(neosnippet_expand_or_jump) neosnippet#mappings#expand_or_jump_impl()
lnoremap <expr> <Plug>(eskk:toggle) eskk#toggle()
noremap! <expr> <Plug>(eskk:toggle) eskk#toggle()
lnoremap <expr> <Plug>(eskk:disable) eskk#disable()
noremap! <expr> <Plug>(eskk:disable) eskk#disable()
lnoremap <expr> <Plug>(eskk:enable) eskk#enable()
noremap! <expr> <Plug>(eskk:enable) eskk#enable()
cnoremap <RightMouse> +
inoremap <RightMouse> +
imap <F1> 
cmap <C-Space> <Nul>
nnoremap  Ah
nnoremap <silent>  
nnoremap  :set invpaste paste?
nnoremap <silent>  
snoremap  a<BS>
nnoremap <silent>  :Unite -buffer-name=help help
nnoremap 	 Il
xnoremap 	 >
nnoremap <silent>  :Unite change jump
nnoremap <silent>  :redraw!
snoremap  a<BS>
xmap  <Plug>(wildfire-fuel)
nmap  <Plug>(wildfire-fuel)
nnoremap  zz
nnoremap <silent>  :CtrlP
smap <silent>  <Plug>(neosnippet_jump_or_expand)
nnoremap <silent> <expr>  ":\Unite -select=".(tabpagenr()-1)." tab\"
nmap  <Plug>(choosewin)
nnoremap  :nohlsearch
nnoremap  sc :SyntasticToggleMode
xmap   [Space]
nmap   [Space]
nnoremap <silent> ! :Switch
nnoremap <silent> <expr> * ":\UniteWithCursorWord -buffer-name=search%".bufnr('%')." line:forward:wrap\"
nmap + <Plug>(fontzoom-larger)
xmap <silent> ,e <Plug>CamelCaseMotion_e
omap <silent> ,e <Plug>CamelCaseMotion_e
nmap <silent> ,e <Plug>CamelCaseMotion_e
nmap ,hp <Plug>GitGutterPreviewHunk
nmap ,hr <Plug>GitGutterRevertHunk
nmap ,hs <Plug>GitGutterStageHunk
nnoremap ,u :diffupdate
nnoremap ,f :%s/^$/AB0\.1/g | v/[0-9\-]\./d | %s/AB0\.1//g | %s/^\s\+//g | %s/\v( ){1,10}/ /g | %s/\s\+$//
nnoremap ,p :silent make | redraw! | let x = system("cd ~/PSB/build && ./run.sh")
xmap ,h <Plug>(operator-html-escape)
nmap ,h <Plug>(operator-html-escape)
nnoremap <silent> ,, :update
nmap <silent> ,r <Plug>(quickrun)
xnoremap , <Nop>
nnoremap , <Nop>
nnoremap <silent> <expr> / ":\Unite -buffer-name=search%".bufnr('%')." -start-insert line:forward:wrap\"
nnoremap ;m ,
nnoremap ;n ;
nnoremap <silent> ;r :Unite -buffer-name=register register history/yank
nnoremap <silent> <expr> ;g ":\Unite grep -buffer-name=grep%".tabpagenr()." -auto-preview -no-quit -no-empty -resume\"
xnoremap <silent> ;r d:Unite -buffer-name=register register history/yank
nnoremap <silent> ;t :UniteWithCursorWord -buffer-name=tag tag tag/include
nnoremap <silent> ;o :Unite outline -start-insert -resume
xmap ;u [unite]
nmap ;u [unite]
xnoremap ; <Nop>
nnoremap ; <Nop>
xnoremap < <gv
nnoremap < <<
xnoremap > >gv
nnoremap > >>
nnoremap <silent> <expr> ? ":\Unite -buffer-name=search%".bufnr('%')." -start-insert line:backward\"
nnoremap @@ @a
xmap A <Plug>(niceblock-A)
omap <silent> B <Plug>CamelCaseMotion_b
xmap <silent> B <Plug>CamelCaseMotion_b
nmap <silent> B <Plug>CamelCaseMotion_b
xmap I <Plug>(niceblock-I)
xmap <silent> K <Plug>(ref-keyword)
nmap <silent> K <Plug>(ref-keyword)
nnoremap M m
nnoremap Q q
xmap R <Plug>(operator-replace)
nmap R <Plug>(operator-replace)
nmap S <Plug>(smalls)
omap <silent> W <Plug>CamelCaseMotion_w
xmap <silent> W <Plug>CamelCaseMotion_w
nmap <silent> W <Plug>CamelCaseMotion_w
xmap Y <Plug>(operator-concealedyank)
xmap [% [%m'gv``
nnoremap <silent> [Space]ed :call ToggleVariable('g:eskk#debug')
nmap [c <Plug>GitGutterPrevHunk
nnoremap <silent> [Window]y :echo map(synstack(line('.'), col('.')),     'synIDattr(v:val, "name")')
nnoremap [Space]gg :echo FoldCCnavi()
xnoremap [Space]gg :echo FoldCCnavi()
onoremap [Space]gg :echo FoldCCnavi()
nnoremap [Space]u :Unite outline:foldings
xnoremap [Space]u :Unite outline:foldings
onoremap [Space]u :Unite outline:foldings
nnoremap [Quickfix] <Nop>
nnoremap <silent> [Window]e :Unite junkfile/new junkfile -start-insert
nnoremap <silent> [Window]b :Thumbnail
nnoremap <silent> [Window]o :only
nnoremap <silent> [Window]v :vsplit
nnoremap [Window] <Nop>
xnoremap <silent> [Space]gj :ToggleGJK
nnoremap <silent> [Space]gj :ToggleGJK
nnoremap <silent> [Space]ft :Unite -start-insert filetype
nnoremap <silent> [Space]ss mmHmt:%s/ $//ge`tzt`m
nnoremap <silent> [Space] mmHmt:%s/\r$//ge'tzt'm
nnoremap <silent> [Space]rg :source $MYGVIMRC | echo "source $MYGVIMRC"
nnoremap <silent> [Space]rv :source $MYVIMRC | if has('gui_running') |   source $MYGVIMRC | endif | echo "source $MYVIMRC"
nnoremap <silent> [Space]eg :edit $MYGVIMRC
nnoremap <silent> [Space]ev :edit $MYVIMRC
nnoremap [Space]sy :echo synIDattr(synID(line('.'), col('.'), 1), "name")
nnoremap [Space]w :w
nnoremap [Space]sp :call ToggleOption('spell')
nnoremap <silent> [Space]en :setlocal encoding? termencoding? fenc? fencs?
nnoremap [Space]ar :setlocal autoread
nnoremap <silent> [Space]cl :call ToggleOption('cursorline')
nnoremap <silent> [Space]/ :call ToggleOption('hlsearch')
nnoremap <silent> [Space]p :call ToggleOption('paste'):set mouse=
nnoremap <silent> [Space]. :call ToggleOption('relativenumber')
xnoremap [Space] <Nop>
nnoremap [Space] <Nop>
nnoremap <silent> [Space]gc :Vcs commit
nnoremap <silent> [Space]gs :Vcs status
nnoremap <silent> [Space]re :Restart
nnoremap [Space]ff :VimFilerExplorer
nnoremap <silent> [Space]v :VimFiler -find
nnoremap [Alt]? ?
nnoremap [Alt]/ /
nnoremap <silent> <expr> [Tag]p &filetype == 'help' ? ":\pop\" : ":\Unite jump\"
nnoremap <silent> <expr> [Tag]t &filetype == 'help' ?  "g\" : ":\UniteWithCursorWord -buffer-name=tag -immediately tag tag/include\"
nnoremap [Tag] <Nop>
nnoremap <silent> [Space]b :UniteBookmarkAdd
nnoremap <silent> [Window]w :Unite window
nnoremap <silent> [Window]f :Unite 
nnoremap <silent> [Window]n :Unite -default-action=lcd neobundle:!
nnoremap <silent> [Window]  :Unite -buffer-name=files file_rec:~/.vim/rc
nnoremap <silent> <expr> [Window]r ":\Unite -start-insert ref/".ref#detect()."\"
nnoremap <silent> [Window]s :Unite -buffer-name=files -no-split -multi-line -unique jump_point file_point buffer_tab file_mru file_rec/async:! file file/new
xnoremap [unite] <Nop>
nnoremap [unite] <Nop>
nnoremap [Space]t q:VimShellTerminal 
nnoremap [Space]i q:VimShellInteractive 
nnoremap \ `
xmap ]% ]%m'gv``
nmap ]c <Plug>GitGutterNextHunk
nmap _ <Plug>(fontzoom-smaller)
xmap a% [%v]%
xmap gc <Plug>(caw:prefix)
nmap gc <Plug>(caw:prefix)
xmap gz <Plug>(operator-open-neobundlepath)
nmap gz <Plug>(operator-open-neobundlepath)
nnoremap gu gUiw`]
xnoremap <silent> gP OP^
xnoremap <silent> gp op^
nnoremap <silent> gP OP^
nnoremap <silent> gp op^
nmap gk k
nmap gj j
nmap gs <Plug>(open-browser-wwwsearch)
nnoremap <silent> g :UniteWithCursorWord help
xmap <silent> i,e <Plug>CamelCaseMotion_ie
xmap <silent> i,b <Plug>CamelCaseMotion_ib
xmap <silent> i,w <Plug>CamelCaseMotion_iw
omap <silent> i,e <Plug>CamelCaseMotion_ie
omap <silent> i,b <Plug>CamelCaseMotion_ib
omap <silent> i,w <Plug>CamelCaseMotion_iw
nmap <silent> j <Plug>(accelerated_jk_gj)
nmap <silent> k <Plug>(accelerated_jk_gk)
xnoremap m <Nop>
nnoremap <silent> <expr> n ":\UniteResume search%".bufnr('%')." -no-start-insert\"
xmap p <Plug>(operator-replace)
xnoremap r 
nnoremap s :%s///g<Left><Left>
nmap <silent> sr <Plug>(operator-surround-replace)
nmap <silent> sd <Plug>(operator-surround-delete)
nmap <silent> sa <Plug>(operator-surround-append)
nmap t [Tag]
xnoremap v $h
xnoremap <silent> y "*y:let [@+,@"]=[@*,@*]
xnoremap <silent> } :call ForwardParagraph()mzgv`z
onoremap <silent> } :call ForwardParagraph()
nnoremap <silent> } :call ForwardParagraph()
snoremap <Del> a<BS>
snoremap <BS> a<BS>
nnoremap <silent> <Plug>(gosh_goto_define_split) :call gdev#gosh_goto_define(bufnr('%'), expand('<cword>'), 1)
nnoremap <silent> <Plug>(gosh_goto_define) :call gdev#gosh_goto_define(bufnr('%'), expand('<cword>'), 0)
onoremap <Plug>(operator-replace) g@
vnoremap <silent> <Plug>(wildfire-fuel) :call wildfire#Fuel(v:count1)
onoremap <silent> <Plug>(wildfire-fuel) :call wildfire#Start(v:count1, g:wildfire_objects)
nnoremap <silent> <Plug>(wildfire-fuel) :call wildfire#Start(v:count1, g:wildfire_objects)
onoremap <silent> <Plug>(wildfire-quick-select) :call wildfire#QuickSelect(g:wildfire_objects)
nnoremap <silent> <Plug>(wildfire-quick-select) :call wildfire#QuickSelect(g:wildfire_objects)
vnoremap <silent> <Plug>(wildfire-water) :call wildfire#Water(v:count1)
xnoremap <silent> <Plug>(neosnippet_register_oneshot_snippet) :call neosnippet#mappings#_register_oneshot_snippet()
xnoremap <silent> <expr> <Plug>(neosnippet_start_unite_snippet_target) unite#sources#neosnippet_target#start()
xnoremap <silent> <Plug>(neosnippet_expand_target) :call neosnippet#mappings#_expand_target()
xnoremap <silent> <Plug>(neosnippet_get_selected_text) :call neosnippet#helpers#get_selected_text(visualmode(), 1)
snoremap <silent> <expr> <Plug>(neosnippet_jump) neosnippet#mappings#jump_impl()
snoremap <silent> <expr> <Plug>(neosnippet_expand) neosnippet#mappings#expand_impl()
snoremap <silent> <expr> <Plug>(neosnippet_jump_or_expand) neosnippet#mappings#jump_or_expand_impl()
snoremap <silent> <expr> <Plug>(neosnippet_expand_or_jump) neosnippet#mappings#expand_or_jump_impl()
nnoremap <silent> <F11> :call conque_term#exec_file()
vnoremap <silent> <Plug>(openbrowser-smart-search) :call openbrowser#_keymapping_smart_search('v')
nnoremap <silent> <Plug>(openbrowser-smart-search) :call openbrowser#_keymapping_smart_search('n')
vnoremap <silent> <Plug>(openbrowser-search) :call openbrowser#_keymapping_search('v')
nnoremap <silent> <Plug>(openbrowser-search) :call openbrowser#_keymapping_search('n')
vnoremap <silent> <Plug>(openbrowser-open) :call openbrowser#_keymapping_open('v')
nnoremap <silent> <Plug>(openbrowser-open) :call openbrowser#_keymapping_open('n')
nnoremap <silent> <Plug>(vimfiler_simple) :VimFilerSimple
nnoremap <silent> <Plug>(vimfiler_create) :VimFilerCreate
nnoremap <silent> <Plug>(vimfiler_switch) :VimFiler
nnoremap <silent> <Plug>(vimfiler_split_create) :VimFilerSplit
nnoremap <silent> <Plug>(choosewin-swap) :call choosewin#swap(range(1, winnr('$')), {'noop': 1})
nnoremap <silent> <Plug>(choosewin) :call choosewin#start(range(1, winnr('$')))
vnoremap <silent> <Plug>(quickrun) :QuickRun -mode v
nnoremap <silent> <Plug>(quickrun) :QuickRun -mode n
nnoremap <silent> <Plug>(quickrun-op) :set operatorfunc=quickrun#operatorg@
nnoremap <silent> <Plug>(operator-concealedyank) y
vnoremap <silent> <Plug>(ref-keyword) :call ref#K('visual')
nnoremap <silent> <Plug>(ref-keyword) :call ref#K('normal')
onoremap <silent> <Plug>(smalls-excursion) :call smalls#start('o', { 'auto_excursion': 1 })
xnoremap <silent> <Plug>(smalls-excursion) :call smalls#start('v', { 'auto_excursion': 1 })
nnoremap <silent> <Plug>(smalls-excursion) :call smalls#start('n', { 'auto_excursion': 1 })
onoremap <silent> <Plug>(smalls) :call smalls#start('o', {})
xnoremap <silent> <Plug>(smalls) :call smalls#start('v', {})
nnoremap <silent> <Plug>(smalls) :call smalls#start('n', {})
vmap <Plug>(caw:prefix)uv <Plug>(caw:input:uncomment)
nmap <Plug>(caw:prefix)uv <Plug>(caw:input:uncomment)
vmap <Plug>(caw:prefix)v <Plug>(caw:input:comment)
nmap <Plug>(caw:prefix)v <Plug>(caw:input:comment)
vnoremap <silent> <Plug>(caw:input:uncomment) :call caw#keymapping_stub('v', 'input', 'uncomment')
nnoremap <silent> <Plug>(caw:input:uncomment) :call caw#keymapping_stub('n', 'input', 'uncomment')
vnoremap <silent> <Plug>(caw:input:comment) :call caw#keymapping_stub('v', 'input', 'comment')
nnoremap <silent> <Plug>(caw:input:comment) :call caw#keymapping_stub('n', 'input', 'comment')
vmap <Plug>(caw:prefix)O <Plug>(caw:jump:comment-prev)
nmap <Plug>(caw:prefix)O <Plug>(caw:jump:comment-prev)
vmap <Plug>(caw:prefix)o <Plug>(caw:jump:comment-next)
nmap <Plug>(caw:prefix)o <Plug>(caw:jump:comment-next)
nnoremap <silent> <Plug>(caw:jump:comment-prev) :call caw#keymapping_stub('n', 'jump', 'comment-prev')
nnoremap <silent> <Plug>(caw:jump:comment-next) :call caw#keymapping_stub('n', 'jump', 'comment-next')
vmap <Plug>(caw:prefix)b <Plug>(caw:box:comment)
nmap <Plug>(caw:prefix)b <Plug>(caw:box:comment)
vnoremap <silent> <Plug>(caw:box:comment) :call caw#keymapping_stub('v', 'box', 'comment')
nnoremap <silent> <Plug>(caw:box:comment) :call caw#keymapping_stub('n', 'box', 'comment')
vmap <Plug>(caw:prefix)uw <Plug>(caw:wrap:uncomment)
nmap <Plug>(caw:prefix)uw <Plug>(caw:wrap:uncomment)
vmap <Plug>(caw:prefix)w <Plug>(caw:wrap:comment)
nmap <Plug>(caw:prefix)w <Plug>(caw:wrap:comment)
vnoremap <silent> <Plug>(caw:wrap:toggle) :call caw#keymapping_stub('v', 'wrap', 'toggle')
nnoremap <silent> <Plug>(caw:wrap:toggle) :call caw#keymapping_stub('n', 'wrap', 'toggle')
vnoremap <silent> <Plug>(caw:wrap:uncomment) :call caw#keymapping_stub('v', 'wrap', 'uncomment')
nnoremap <silent> <Plug>(caw:wrap:uncomment) :call caw#keymapping_stub('n', 'wrap', 'uncomment')
vnoremap <silent> <Plug>(caw:wrap:comment) :call caw#keymapping_stub('v', 'wrap', 'comment')
nnoremap <silent> <Plug>(caw:wrap:comment) :call caw#keymapping_stub('n', 'wrap', 'comment')
vmap <Plug>(caw:prefix)ua <Plug>(caw:a:uncomment)
nmap <Plug>(caw:prefix)ua <Plug>(caw:a:uncomment)
vmap <Plug>(caw:prefix)a <Plug>(caw:a:comment)
nmap <Plug>(caw:prefix)a <Plug>(caw:a:comment)
vnoremap <silent> <Plug>(caw:a:toggle) :call caw#keymapping_stub('v', 'a', 'toggle')
nnoremap <silent> <Plug>(caw:a:toggle) :call caw#keymapping_stub('n', 'a', 'toggle')
vnoremap <silent> <Plug>(caw:a:uncomment) :call caw#keymapping_stub('v', 'a', 'uncomment')
nnoremap <silent> <Plug>(caw:a:uncomment) :call caw#keymapping_stub('n', 'a', 'uncomment')
vnoremap <silent> <Plug>(caw:a:comment) :call caw#keymapping_stub('v', 'a', 'comment')
nnoremap <silent> <Plug>(caw:a:comment) :call caw#keymapping_stub('n', 'a', 'comment')
vmap <Plug>(caw:prefix)uI <Plug>(caw:I:uncomment)
nmap <Plug>(caw:prefix)uI <Plug>(caw:I:uncomment)
vmap <Plug>(caw:prefix)I <Plug>(caw:I:comment)
nmap <Plug>(caw:prefix)I <Plug>(caw:I:comment)
vnoremap <silent> <Plug>(caw:I:toggle) :call caw#keymapping_stub('v', 'I', 'toggle')
nnoremap <silent> <Plug>(caw:I:toggle) :call caw#keymapping_stub('n', 'I', 'toggle')
vnoremap <silent> <Plug>(caw:I:uncomment) :call caw#keymapping_stub('v', 'I', 'uncomment')
nnoremap <silent> <Plug>(caw:I:uncomment) :call caw#keymapping_stub('n', 'I', 'uncomment')
vnoremap <silent> <Plug>(caw:I:comment) :call caw#keymapping_stub('v', 'I', 'comment')
nnoremap <silent> <Plug>(caw:I:comment) :call caw#keymapping_stub('n', 'I', 'comment')
vmap <Plug>(caw:prefix)c <Plug>(caw:i:toggle)
nmap <Plug>(caw:prefix)c <Plug>(caw:i:toggle)
vmap <Plug>(caw:prefix)ui <Plug>(caw:i:uncomment)
nmap <Plug>(caw:prefix)ui <Plug>(caw:i:uncomment)
vmap <Plug>(caw:prefix)i <Plug>(caw:i:comment)
nmap <Plug>(caw:prefix)i <Plug>(caw:i:comment)
vnoremap <silent> <Plug>(caw:i:toggle) :call caw#keymapping_stub('v', 'i', 'toggle')
nnoremap <silent> <Plug>(caw:i:toggle) :call caw#keymapping_stub('n', 'i', 'toggle')
vnoremap <silent> <Plug>(caw:i:uncomment) :call caw#keymapping_stub('v', 'i', 'uncomment')
nnoremap <silent> <Plug>(caw:i:uncomment) :call caw#keymapping_stub('n', 'i', 'uncomment')
vnoremap <silent> <Plug>(caw:i:comment) :call caw#keymapping_stub('v', 'i', 'comment')
nnoremap <silent> <Plug>(caw:i:comment) :call caw#keymapping_stub('n', 'i', 'comment')
nnoremap <Plug>(eskk:save-dictionary) :EskkUpdateDictionary
vnoremap <silent> <Plug>CamelCaseMotion_ie :call camelcasemotion#InnerMotion('e',v:count1)
vnoremap <silent> <Plug>CamelCaseMotion_ib :call camelcasemotion#InnerMotion('b',v:count1)
vnoremap <silent> <Plug>CamelCaseMotion_iw :call camelcasemotion#InnerMotion('w',v:count1)
onoremap <silent> <Plug>CamelCaseMotion_ie :call camelcasemotion#InnerMotion('e',v:count1)
onoremap <silent> <Plug>CamelCaseMotion_ib :call camelcasemotion#InnerMotion('b',v:count1)
onoremap <silent> <Plug>CamelCaseMotion_iw :call camelcasemotion#InnerMotion('w',v:count1)
vnoremap <silent> <Plug>CamelCaseMotion_e :call camelcasemotion#Motion('e',v:count1,'v')
vnoremap <silent> <Plug>CamelCaseMotion_b :call camelcasemotion#Motion('b',v:count1,'v')
vnoremap <silent> <Plug>CamelCaseMotion_w :call camelcasemotion#Motion('w',v:count1,'v')
onoremap <silent> <Plug>CamelCaseMotion_e :call camelcasemotion#Motion('e',v:count1,'o')
onoremap <silent> <Plug>CamelCaseMotion_b :call camelcasemotion#Motion('b',v:count1,'o')
onoremap <silent> <Plug>CamelCaseMotion_w :call camelcasemotion#Motion('w',v:count1,'o')
nnoremap <silent> <Plug>CamelCaseMotion_e :call camelcasemotion#Motion('e',v:count1,'n')
nnoremap <silent> <Plug>CamelCaseMotion_b :call camelcasemotion#Motion('b',v:count1,'n')
nnoremap <silent> <Plug>CamelCaseMotion_w :call camelcasemotion#Motion('w',v:count1,'n')
nnoremap <silent> <Plug>(vimshell_create) :VimShellCreate
nnoremap <silent> <Plug>(vimshell_switch) :VimShell
nnoremap <silent> <Plug>(accelerated_jk_k_position) :call accelerated#position_driven#command('k')
nnoremap <silent> <Plug>(accelerated_jk_j_position) :call accelerated#position_driven#command('j')
nnoremap <silent> <Plug>(accelerated_jk_gk_position) :call accelerated#position_driven#command('gk')
nnoremap <silent> <Plug>(accelerated_jk_gj_position) :call accelerated#position_driven#command('gj')
nnoremap <silent> <Plug>(accelerated_jk_k) :call accelerated#time_driven#command('k')
nnoremap <silent> <Plug>(accelerated_jk_j) :call accelerated#time_driven#command('j')
nnoremap <silent> <Plug>(accelerated_jk_gk) :call accelerated#time_driven#command('gk')
nnoremap <silent> <Plug>(accelerated_jk_gj) :call accelerated#time_driven#command('gj')
nnoremap <silent> <Plug>(J6uil_action_open_links) :call J6uil#action('open_links')
nnoremap <silent> <Plug>(J6uil_action_enter) :call J6uil#action('enter')
nnoremap <silent> <Plug>(J6uil_unite_members) :Unite J6uil/members -buffer-name=J6uil_members
nnoremap <silent> <Plug>(J6uil_unite_rooms) :Unite J6uil/rooms -buffer-name=J6uil_rooms
nnoremap <silent> <Plug>(J6uil_prev_room) :J6uilPrevRoom
nnoremap <silent> <Plug>(J6uil_next_room) :J6uilNextRoom
nnoremap <silent> <Plug>(J6uil_disconnect) :J6uilDisconnect
nnoremap <silent> <Plug>(J6uil_reconnect) :J6uilReconnect
nnoremap <silent> <Plug>(J6uil_open_say_buffer) :exe ":silent call J6uil#say#open(J6uil#buffer#current_room())"
vnoremap <expr> <Plug>(niceblock-A) niceblock#force_blockwise('A')
vnoremap <expr> <Plug>(niceblock-I) niceblock#force_blockwise('I')
nnoremap <silent> <Plug>GitGutterPreviewHunk :GitGutterPreviewHunk
nnoremap <silent> <Plug>GitGutterRevertHunk :GitGutterRevertHunk
nnoremap <silent> <Plug>GitGutterStageHunk :GitGutterStageHunk
nnoremap <silent> <expr> <Plug>GitGutterPrevHunk &diff ? '[c' : ":\execute v:count1 . 'GitGutterPrevHunk'\"
nnoremap <silent> <expr> <Plug>GitGutterNextHunk &diff ? ']c' : ":\execute v:count1 . 'GitGutterNextHunk'\"
nnoremap <Plug>(operator-surround-repeat) .
onoremap <Plug>(operator-surround-replace) g@
onoremap <Plug>(operator-surround-delete) g@
onoremap <Plug>(operator-surround-append) g@
xnoremap <RightMouse> "+p
nnoremap <RightMouse> "+p
nnoremap <F9> :silent make | redraw!
nnoremap <F1> 
vmap <F1> 
omap <F1> 
nnoremap <Down> :res -5
nnoremap <Up> :res +5
nnoremap <Right> :10winc>
onoremap <Plug>(operator-open-neobundlepath) g@
nnoremap <silent> <SNR>36_(decrement) :AddNumbers -1
nnoremap <silent> <SNR>36_(increment) :AddNumbers 1
nnoremap <SNR>36_(command-line-norange) q:
xnoremap <SNR>36_(command-line-enter) q:
nnoremap <SNR>36_(command-line-enter) q:
xnoremap <S-Tab> <
nmap <C-Space> <Nul>
vmap <S-CR> <Plug>(wildfire-water)
vnoremap <Right> <Nop>
onoremap <Right> <Nop>
nnoremap <Left> :10winc<
vnoremap <Down> <Nop>
onoremap <Down> <Nop>
vnoremap <Up> <Nop>
onoremap <Up> <Nop>
nmap <Nul> <Plug>(vimshell_switch)
nmap <silent> <F7> :call ToggleSpell()
cnoremap  <Home>
inoremap <expr>  pumvisible() ? "\<PageUp>"   : "\<Left>"
cnoremap  <Left>
imap  :set invpaste paste?i
cnoremap  <Del>
inoremap  <Del>
inoremap <expr>  pumvisible() ? neocomplete#cancel_popup() : "\<End>"
cnoremap  <End>
inoremap <expr>  pumvisible() ? "\<PageDown>" : "\<Right>"
cnoremap  <Right>
inoremap <expr>  neocomplete#undo_completion()
cnoremap <silent> <expr>  (getcmdtype() == '/') ? "\:Unite -buffer-name=search line:forward:wrap -input=".getcmdline()."\" : "\"
inoremap <expr>  neocomplete#smart_close_popup()."\"
lmap <NL> <Plug>(eskk:toggle)
cmap <NL> <Plug>(eskk:toggle)
imap <NL> <Plug>(eskk:toggle)
imap  <Plug>(neocomplete_start_unite_complete)
cnoremap  e getcmdpos() == 1 ? '' : getcmdline()[:getcmdpos()-2]
inoremap <expr>  neocomplete#complete_common_string()
inoremap <expr>  pumvisible() ? "\" : "\\\\<Down>"
cnoremap  <Down>
cmap  <Plug>(unite_cmdmatch_complete)
inoremap <expr>  pumvisible() ? "\" : "\\"
cnoremap  <Up>
imap <silent>  <Plug>(neosnippet_jump_or_expand)
inoremap  	
inoremap  u
inoremap  u
inoremap <expr>  neocomplete#start_manual_complete('file')
inoremap <expr>  pumvisible() ? neocomplete#close_popup() :  "\\""
cnoremap  *
inoremap <expr> ' pumvisible() ? neocomplete#close_popup() : "'"
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set backspace=indent,eol,start
set backupdir=~/tmp,~/
set balloonexpr=SyntasticBalloonsExprNotifier()
set breakat=\ \	;:,!?
set browsedir=current
set clipboard=autoselect,exclude:cons\\|linux,unnamedplus
set cmdheight=2
set cmdwinheight=5
set commentstring=%s
set complete=.
set completefunc=neocomplete#complete#manual_complete
set completeopt=preview,menuone
set directory=~/tmp,/var/tmp,/tmp
set display=lastline
set noequalalways
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set fileformats=unix,dos,mac
set fillchars=vert:|
set grepprg=grep\ -inH
set helpheight=12
set helplang=en
set hidden
set history=1000
set ignorecase
set incsearch
set infercase
set isfname=@,48-57,/,.,-,_,+,,,#,$,%,~
set keywordprg=:help
set laststatus=2
set lazyredraw
set listchars=tab:▸\ ,trail:-,extends:»,precedes:«,nbsp:%
set matchpairs=(:),{:},[:],<:>
set matchtime=3
set mouse=a
set pastetoggle=<C-C>
set previewheight=8
set pumheight=20
set redrawtime=100
set report=0
set runtimepath=~/.cache/neobundle/neobundle.vim,~/.vim,~/.cache/neobundle/vim-filetype-haskell/,~/.cache/neobundle/unite-sudo/,~/.cache/neobundle/vimproc.vim/,~/.cache/neobundle/vim-operator-user/,~/.cache/neobundle/vim-operator-surround/,~/.cache/neobundle/vim-gitgutter/,~/.cache/neobundle/tagbar/,~/.cache/neobundle/neobundle-vim-scripts/,~/.cache/neobundle/syntastic/,~/.cache/neobundle/vim-niceblock/,~/.cache/neobundle/neomru.vim/,~/.cache/neobundle/vim-guicolorscheme/,~/.cache/neobundle/vim-python-pep8-indent/,~/.cache/neobundle/unite-filetype/,~/.cache/neobundle/vim-vcs/,~/.cache/neobundle/unite-colorscheme/,~/.cache/neobundle/J6uil.vim/,~/.cache/neobundle/vim-css3-syntax/,~/.cache/neobundle/csapprox/,~/.cache/neobundle/unite-tag/,~/.cache/neobundle/context_filetype.vim/,~/.cache/neobundle/accelerated-jk/,~/.cache/neobundle/neocomplcache-rsense/,~/.cache/neobundle/vesting/,~/.cache/neobundle/vimshell.vim/,~/.cache/neobundle/CamelCaseMotion/,~/.cache/neobundle/jedi-vim/,~/.cache/neobundle/d.vim/,~/.cache/neobundle/vinarise.vim/,~/.cache/neobundle/simple-javascript-indenter/,~/.cache/neobundle/winmove.vim/,~/.cache/neobundle/eskk.vim/,~/.cache/neobundle/vim-processing/,~/.cache/neobundle/caw.vim/,~/.cache/neobundle/unite-ssh/,~/.cache/neobundle/javacomplete/,~/.cache/neobundle/cpp-vim/,~/.cache/neobundle/hexript.vim/,~/.cache/neobundle/vim-smalls/,~/.cache/neobundle/vim-ref/,~/.cache/neobundle/echodoc.vim/,~/.cache/neobundle/vim-prettyprint/,~/.cache/neobundle/concealedyank.vim/,~/.cache/neobundle/unite-kawaii-calc/,~/.cache/neobundle/vim-quickrun/,~/.cache/neobundle/unite-quickfix/,~/.cache/neobundle/vim-json/,~/.cache/neobundle/autofmt/,~/.cache/neobundle/vim-textobj-user/,~/.cache/neobundle/vim-choosewin/,~/.cache/neobundle/vim-javascript-syntax/,~/.cache/neobundle/unite.vim/,~/.cache/neobundle/foldCC/,~/.cache/neobundle/vital.vim/,~/.cache/neobundle/vimfiler.vim/,~/.cache/neobundle/gocode/vim,~/.cache/neobundle/matchit.zip/,~/.cache/neobundle/vim-fontzoom/,~/.cache/neobundle/open-browser.vim/,~/.cache/neobundle/vim-conque/,~/.cache/neobundle/vimdoc-ja/,~/.cache/neobundle/vim-qfreplace/,~/.cache/neobundle/junkfile.vim/,~/.cache/neobundle/vim-repeat/,~/.cache/neobundle/neosnippet.vim/,~/.cache/neobundle/unite-help/,~/.cache/neobundle/vim-scouter/,~/.cache/neobundle/vim-ft-help_fold/,~/.cache/neobundle/neocomplete.vim/,~/.cache/neobundle/vim-gitcomplete/,~/.cache/neobundle/wildfire.vim/,~/.cache/neobundle/vim-ft-markdown_fold/,~/.cache/neobundle/vim-operator-replace/,~/.cache/neobundle/ctrlp.vim/,~/.cache/neobundle/neco-look/,~/.cache/neobundle/neosnippet-snippets/,~/.cache/neobundle/vim-tabpagecd/,~/.cache/neobundle/w3m.vim/,~/.cache/neobundle/neco-ghc/,~/.cache/neobundle/vim-unite-history/,~/.cache/neobundle/restart.vim/,~/.cache/neobundle/vim-ft-diff_fold/,~/.cache/neobundle/unite-build/,~/.cache/neobundle/vim-smartchr/,~/.cache/neobundle/vimshell-ssh/,~/.cache/neobundle/vim-openbuf/,~/.cache/neobundle/vim-ruby/,~/.cache/neobundle/vim-gdev/,~/.cache/neobundle/webapi-vim/,~/.cache/neobundle/unite-outline/,~/.cache/neobundle/.neobundle,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim74,/usr/local/share/vim/vimfiles/after,~/.vim/after,~/.cache/neobundle/vim-css3-syntax//after,~/.cache/neobundle/csapprox//after,~/.cache/neobundle/vesting//after,~/.cache/neobundle/jedi-vim//after,~/.cache/neobundle/vim-ft-help_fold//after
set secure
set shell=bash
set shiftround
set shiftwidth=4
set shortmess=aTIc
set showbreak=>\\
set showfulltag
set showmatch
set noshowmode
set showtabline=2
set smartcase
set smartindent
set smarttab
set softtabstop=4
set splitbelow
set splitright
set nostartofline
set statusline=%{winnr('$')>1?'['.winnr().'/'.winnr('$').(winnr('#')==winnr()?'#':'').']':''}\ %{(&previewwindow?'[preview]\ ':'').expand('%:t:.')}\ %=%m%y%{'['.(&fenc!=''?&fenc:&enc).','.&ff.']'}%{printf('\ %4d/%d',line('.'),line('$'))}\ %c
set noswapfile
set tabstop=4
set timeoutlen=3000
set title
set titlelen=95
set titlestring=\ %{expand('%:p:.:~')}%(%m%r%w%)\ %<(%{<SNR>32_strwidthpart(\ fnamemodify(&filetype\ ==#\ 'vimfiler'\ ?\ substitute(b:vimfiler.current_dir,\ '.\\zs/$',\ '',\ '')\ :\ getcwd(),\ ':~'),\ &columns-len(expand('%:p:.:~')))})\ -\ VIM
set ttimeoutlen=100
set undodir=~/tmp,/var/tmp,/tmp
set undofile
set updatetime=1000
set viewdir=~/.cache/vim_view
set viewoptions=folds,cursor,slash,unix
set virtualedit=block
set whichwrap=,,h,l,<,>,[,],b,s,~
set wildignore=*.pyc
set wildmode=list:longest,full
set wildoptions=tagfile
set winwidth=30
set nowritebackup
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Homework/AiProg/Ex1/src
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +5 main.py
badd +50 csp.py
badd +0 astar.py
badd +0 network.py
badd +0 ~/Homework/AiProg/Ex1/input/CSP/test_enkel.txt
argglobal
silent! argdel *
argadd main.py
edit csp.py
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
3wincmd h
wincmd w
wincmd w
wincmd w
wincmd t
set winheight=1 winwidth=1
exe 'vert 1resize ' . ((&columns * 85 + 182) / 364)
exe 'vert 2resize ' . ((&columns * 95 + 182) / 364)
exe 'vert 3resize ' . ((&columns * 95 + 182) / 364)
exe 'vert 4resize ' . ((&columns * 86 + 182) / 364)
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <expr> <C-Space> jedi#complete_string(0)
nnoremap <buffer> ,r :call jedi#rename()
nnoremap <buffer> ,n :call jedi#usages()
nnoremap <buffer> ,d :call jedi#goto_definitions()
nnoremap <buffer> ,g :call jedi#goto_assignments()
nnoremap <buffer> <silent> K :call jedi#show_documentation()
xmap <buffer> gcc <Plug>(caw:i:toggle)
nmap <buffer> gcc <Plug>(caw:i:toggle)
xmap <buffer> gc <Plug>(caw:prefix)
nmap <buffer> gc <Plug>(caw:prefix)
inoremap <buffer> . .=jedi#complete_opened() ? "" : "\<C-X>\<C-O>\<C-P>"
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
set colorcolumn=81
setlocal colorcolumn=81
setlocal comments=b:#,fb:-
setlocal commentstring=#\ %s
setlocal complete=.
set concealcursor=iv
setlocal concealcursor=iv
set conceallevel=2
setlocal conceallevel=2
setlocal completefunc=neocomplete#complete#auto_complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'python'
setlocal filetype=python
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
set foldlevel=99
setlocal foldlevel=99
setlocal foldmarker={{{,}}}
set foldmethod=indent
setlocal foldmethod=indent
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=FoldCCtext()
setlocal formatexpr=
setlocal formatoptions=tcqmM
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=^\\s*\\(from\\|import\\)
setlocal includeexpr=substitute(v:fname,'\\.','/','g')
setlocal indentexpr=GetPythonPEPIndent(v:lnum)
setlocal indentkeys=!^F,o,O,<:>,0),0],0},=elif,=except
setlocal infercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=pydoc
set linebreak
setlocal linebreak
setlocal nolisp
setlocal lispwords=
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=jedi#completions
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{winnr('$')>1?'['.winnr().'/'.winnr('$').(winnr('#')==winnr()?'#':'').']':''}\ %{(&previewwindow?'[preview]\ ':'').expand('%:t:.')}\ %=%m%y%{'['.(&fenc!=''?&fenc:&enc).','.&ff.']'}%{printf('\ %4d/%d',line('.'),line('$'))}\ %c
setlocal suffixesadd=.py
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'python'
setlocal syntax=python
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
21
normal! zo
41
normal! zo
47
normal! zo
48
normal! zo
74
normal! zo
99
normal! zo
107
normal! zo
109
normal! zo
let s:l = 79 - ((22 * winheight(0) + 35) / 71)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
79
normal! 0
wincmd w
argglobal
edit csp.py
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <expr> <C-Space> jedi#complete_string(0)
nnoremap <buffer> ,r :call jedi#rename()
nnoremap <buffer> ,n :call jedi#usages()
nnoremap <buffer> ,d :call jedi#goto_definitions()
nnoremap <buffer> ,g :call jedi#goto_assignments()
nnoremap <buffer> <silent> K :call jedi#show_documentation()
xmap <buffer> gcc <Plug>(caw:i:toggle)
nmap <buffer> gcc <Plug>(caw:i:toggle)
xmap <buffer> gc <Plug>(caw:prefix)
nmap <buffer> gc <Plug>(caw:prefix)
inoremap <buffer> . .=jedi#complete_opened() ? "" : "\<C-X>\<C-O>\<C-P>"
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
set colorcolumn=81
setlocal colorcolumn=81
setlocal comments=b:#,fb:-
setlocal commentstring=#\ %s
setlocal complete=.
set concealcursor=iv
setlocal concealcursor=iv
set conceallevel=2
setlocal conceallevel=2
setlocal completefunc=neocomplete#complete#auto_complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'python'
setlocal filetype=python
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
set foldlevel=99
setlocal foldlevel=99
setlocal foldmarker={{{,}}}
set foldmethod=indent
setlocal foldmethod=indent
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=FoldCCtext()
setlocal formatexpr=
setlocal formatoptions=tcqmM
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=^\\s*\\(from\\|import\\)
setlocal includeexpr=substitute(v:fname,'\\.','/','g')
setlocal indentexpr=GetPythonPEPIndent(v:lnum)
setlocal indentkeys=!^F,o,O,<:>,0),0],0},=elif,=except
setlocal infercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=pydoc
set linebreak
setlocal linebreak
setlocal nolisp
setlocal lispwords=
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=jedi#completions
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{winnr('$')>1?'['.winnr().'/'.winnr('$').(winnr('#')==winnr()?'#':'').']':''}\ %{(&previewwindow?'[preview]\ ':'').expand('%:t:.')}\ %=%m%y%{'['.(&fenc!=''?&fenc:&enc).','.&ff.']'}%{printf('\ %4d/%d',line('.'),line('$'))}\ %c
setlocal suffixesadd=.py
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'python'
setlocal syntax=python
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
21
normal! zo
41
normal! zo
47
normal! zo
48
normal! zo
74
normal! zo
99
normal! zo
107
normal! zo
109
normal! zo
let s:l = 52 - ((37 * winheight(0) + 35) / 71)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
52
normal! 0
lcd ~/Homework/AiProg/Ex1/src
wincmd w
argglobal
edit ~/Homework/AiProg/Ex1/src/astar.py
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <expr> <C-Space> jedi#complete_string(0)
nnoremap <buffer> ,r :call jedi#rename()
nnoremap <buffer> ,n :call jedi#usages()
nnoremap <buffer> ,d :call jedi#goto_definitions()
nnoremap <buffer> ,g :call jedi#goto_assignments()
nnoremap <buffer> <silent> K :call jedi#show_documentation()
xmap <buffer> gcc <Plug>(caw:i:toggle)
nmap <buffer> gcc <Plug>(caw:i:toggle)
xmap <buffer> gc <Plug>(caw:prefix)
nmap <buffer> gc <Plug>(caw:prefix)
inoremap <buffer> . .=jedi#complete_opened() ? "" : "\<C-X>\<C-O>\<C-P>"
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
set colorcolumn=81
setlocal colorcolumn=81
setlocal comments=b:#,fb:-
setlocal commentstring=#\ %s
setlocal complete=.
set concealcursor=iv
setlocal concealcursor=iv
set conceallevel=2
setlocal conceallevel=2
setlocal completefunc=neocomplete#complete#auto_complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'python'
setlocal filetype=python
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
set foldlevel=99
setlocal foldlevel=99
setlocal foldmarker={{{,}}}
set foldmethod=indent
setlocal foldmethod=indent
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=FoldCCtext()
setlocal formatexpr=
setlocal formatoptions=tcqmM
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=^\\s*\\(from\\|import\\)
setlocal includeexpr=substitute(v:fname,'\\.','/','g')
setlocal indentexpr=GetPythonPEPIndent(v:lnum)
setlocal indentkeys=!^F,o,O,<:>,0),0],0},=elif,=except
setlocal infercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=pydoc
set linebreak
setlocal linebreak
setlocal nolisp
setlocal lispwords=
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=jedi#completions
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{winnr('$')>1?'['.winnr().'/'.winnr('$').(winnr('#')==winnr()?'#':'').']':''}\ %{(&previewwindow?'[preview]\ ':'').expand('%:t:.')}\ %=%m%y%{'['.(&fenc!=''?&fenc:&enc).','.&ff.']'}%{printf('\ %4d/%d',line('.'),line('$'))}\ %c
setlocal suffixesadd=.py
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'python'
setlocal syntax=python
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
9
normal! zo
13
normal! zo
20
normal! zo
21
normal! zo
let s:l = 22 - ((21 * winheight(0) + 35) / 71)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
22
normal! 02|
wincmd w
argglobal
edit ~/Homework/AiProg/Ex1/src/network.py
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <expr> <C-Space> jedi#complete_string(0)
nnoremap <buffer> ,r :call jedi#rename()
nnoremap <buffer> ,n :call jedi#usages()
nnoremap <buffer> ,d :call jedi#goto_definitions()
nnoremap <buffer> ,g :call jedi#goto_assignments()
nnoremap <buffer> <silent> K :call jedi#show_documentation()
xmap <buffer> gcc <Plug>(caw:i:toggle)
nmap <buffer> gcc <Plug>(caw:i:toggle)
xmap <buffer> gc <Plug>(caw:prefix)
nmap <buffer> gc <Plug>(caw:prefix)
inoremap <buffer> . .=jedi#complete_opened() ? "" : "\<C-X>\<C-O>\<C-P>"
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
set colorcolumn=81
setlocal colorcolumn=81
setlocal comments=b:#,fb:-
setlocal commentstring=#\ %s
setlocal complete=.
set concealcursor=iv
setlocal concealcursor=iv
set conceallevel=2
setlocal conceallevel=2
setlocal completefunc=neocomplete#complete#manual_complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'python'
setlocal filetype=python
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
set foldlevel=99
setlocal foldlevel=99
setlocal foldmarker={{{,}}}
set foldmethod=indent
setlocal foldmethod=indent
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=FoldCCtext()
setlocal formatexpr=
setlocal formatoptions=tcqmM
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=^\\s*\\(from\\|import\\)
setlocal includeexpr=substitute(v:fname,'\\.','/','g')
setlocal indentexpr=GetPythonPEPIndent(v:lnum)
setlocal indentkeys=!^F,o,O,<:>,0),0],0},=elif,=except
setlocal infercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=pydoc
set linebreak
setlocal linebreak
setlocal nolisp
setlocal lispwords=
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=jedi#completions
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{winnr('$')>1?'['.winnr().'/'.winnr('$').(winnr('#')==winnr()?'#':'').']':''}\ %{(&previewwindow?'[preview]\ ':'').expand('%:t:.')}\ %=%m%y%{'['.(&fenc!=''?&fenc:&enc).','.&ff.']'}%{printf('\ %4d/%d',line('.'),line('$'))}\ %c
setlocal suffixesadd=.py
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'python'
setlocal syntax=python
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
let s:l = 56 - ((55 * winheight(0) + 35) / 71)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
56
normal! 0
lcd ~/Homework/AiProg/Ex1/src
wincmd w
2wincmd w
exe 'vert 1resize ' . ((&columns * 85 + 182) / 364)
exe 'vert 2resize ' . ((&columns * 95 + 182) / 364)
exe 'vert 3resize ' . ((&columns * 95 + 182) / 364)
exe 'vert 4resize ' . ((&columns * 86 + 182) / 364)
tabedit ~/Homework/AiProg/Ex1/input/CSP/test_enkel.txt
set splitbelow splitright
wincmd t
set winheight=1 winwidth=1
argglobal
let s:cpo_save=&cpo
set cpo&vim
xmap <buffer> gcc <Plug>(caw:i:toggle)
nmap <buffer> gcc <Plug>(caw:i:toggle)
xmap <buffer> gc <Plug>(caw:prefix)
nmap <buffer> gc <Plug>(caw:prefix)
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
set colorcolumn=81
setlocal colorcolumn=81
setlocal comments=fb:-,fb:*
setlocal commentstring=
setlocal complete=.
set concealcursor=iv
setlocal concealcursor=iv
set conceallevel=2
setlocal conceallevel=2
setlocal completefunc=neocomplete#complete#manual_complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'text'
setlocal filetype=text
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
set foldlevel=99
setlocal foldlevel=99
setlocal foldmarker={{{,}}}
set foldmethod=indent
setlocal foldmethod=indent
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=FoldCCtext()
setlocal formatexpr=
setlocal formatoptions=tcqmM
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal infercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal lispwords=
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal smartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'text'
setlocal syntax=text
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
let s:l = 1 - ((0 * winheight(0) + 35) / 71)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
lcd ~/Homework/AiProg/Ex1/src
2wincmd w
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=30 shortmess=aTIc
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
